#include <iostream>
using namespace std;
int V, graph[100][100],path[100];

bool isSafe(int v, int pos) {
    if (graph[path[pos - 1]][v] == 0) {
        return false; 
    }
    for (int i = 0; i < pos; ++i) {
        if (path[i] == v) {
            return false;
        }
    }
    return true; 
}

bool hamiltonianPathUtil( int pos) {
    if (pos == V) {
        return true; 
    }
    for (int i = 1; i < V; ++i) {
        if (isSafe(i, pos)) {
            path[pos] = i;
            if (hamiltonianPathUtil( pos + 1)) {
                return true; 
            }
            path[pos] = -1; 
        }
    }
    return false; 
}

bool findHamiltonianPath() {
    for (int i = 0; i < V; ++i) {
        path[i] = -1; 
    }
    path[0] = 0; 
    if (!hamiltonianPathUtil(1)) {
        cout << "No Hamiltonian Path exists." << endl;
        return false;
    }
    return true;
}

int main() {
    cin >> V; 
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            cin >> graph[i][j]; 
        }
    }
    if(findHamiltonianPath()){
        cout << "Hamiltonian Path: ";
        for (int i = 0; i < V; ++i) {
            cout << path[i] << " ";
        }
        cout << path[0] << endl;
    }
    return 0;
}
