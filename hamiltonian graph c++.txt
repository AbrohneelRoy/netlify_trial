#include <iostream>
using namespace std;

const int MAX_V = 100; // Maximum number of vertices

int V, graph[MAX_V][MAX_V];

void printSolution(int path[]) {
    cout << "Hamiltonian Path: ";
    for (int i = 0; i < V; ++i) {
        cout << path[i] << " ";
    }
    cout << path[0] << endl;
}

bool isSafe(int v, int pos, int path[]) {
    if (graph[path[pos - 1]][v] == 0) {
        return false; // Check if there's an edge between the previous vertex and the current one
    }
    for (int i = 0; i < pos; ++i) {
        if (path[i] == v) {
            return false; // Check if the current vertex is already in the path
        }
    }
    return true; // If it's safe to add the current vertex to the path
}

bool hamiltonianPathUtil(int path[], int pos) {
    if (pos == V) {
        return true; // If all vertices are included in the path, a Hamiltonian path is found
    }
    for (int v = 1; v < V; ++v) {
        if (isSafe(v, pos, path)) {
            path[pos] = v;
            if (hamiltonianPathUtil(path, pos + 1)) {
                return true; // Recursively explore the path
            }
            path[pos] = -1; // Backtrack if the path is not valid
        }
    }
    return false; // If no path is found
}

bool findHamiltonianPath() {
    int path[MAX_V];
    for (int i = 0; i < V; ++i) {
        path[i] = -1; // Initialize the path array
    }
    path[0] = 0; // Start from the first vertex
    if (!hamiltonianPathUtil(path, 1)) {
        cout << "No Hamiltonian Path exists." << endl;
        return false; // If no Hamiltonian path is found
    }
    printSolution(path); // Print the Hamiltonian path
    return true;
}

int main() {
    int i, j;
    cin >> V; // Input the number of vertices
    for (i = 0; i < V; i++) {
        for (j = 0; j < V; j++) {
            cin >> graph[i][j]; // Input the adjacency matrix
        }
    }
    findHamiltonianPath(); // Find and print the Hamiltonian path
    return 0;
}
correct code